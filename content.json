{"meta":{"title":"niu","subtitle":null,"description":null,"author":"niushiyi","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"闭包现象","slug":"bibao","date":"2017-12-29T06:15:52.568Z","updated":"2017-12-29T06:32:22.135Z","comments":true,"path":"2017/12/29/bibao/","link":"","permalink":"http://yoursite.com/2017/12/29/bibao/","excerpt":"","text":"在一个函数内部，有权访问另一个函数中的变量（并且能够随时访问）！ 尽量不要去看长篇大论关于闭包的解释，很容易把自己绕晕。看一些很容易理解的例子帮助你更好的理解闭包才是最好的！ 闭包 一 : 访问变量局限性大，不能自由访问。12345678function show1() &#123; var a = 10; function show2() &#123; console.log(a) &#125; show2();&#125;show1(); 闭包 二 : 可以自由访问。1234567function show() &#123; var a = 10; return: function() &#123; console.log(a) &#125;&#125;show()(); ###常见闭包一般出现在DOM节点操作中，看下面典型例子！ 12345678910111213141516为每一个li添加点击事件，并且弹出他所在ul中的位置。&lt;ul id=&quot;list&quot;&gt; &lt;li&gt;aaa&lt;/li&gt; &lt;li&gt;aaa&lt;/li&gt; &lt;li&gt;aaa&lt;/li&gt;&lt;/ul&gt;var lis=document.getElementById(&quot;list&quot;).getElementsByTagName(&quot;li&quot;);for(var i=0;i&lt;lis.length;i++)&#123; lis[i]._index=i;//为每个li添加一个属性并且保存他的所在的位置。 lis[i].onclick=function()&#123; alert(i)//无论你点那个，弹出的都是3! alert(this._index);//可以弹出相应的位置!this指你事件触发者.即你点击的 li ! &#125;&#125; 其实闭包现象随处可见，虽然他很容易出问题且不容易调试所以你也可以去试试啦，听着很牛逼的闭包，其实也没什么，哈哈哈哈。。。。","categories":[],"tags":[]},{"title":"Nodejs简述","slug":"Nodejs","date":"2017-12-28T06:20:01.038Z","updated":"2017-12-29T06:39:15.823Z","comments":true,"path":"2017/12/28/Nodejs/","link":"","permalink":"http://yoursite.com/2017/12/28/Nodejs/","excerpt":"","text":"1. Nodejs是什么？ 首先需要明白Nodejs不是一个js应用、而是一个js运行平台。其是由C++编写而成。但是Nodejs是一个后端的运行环境。因此你可以编写系统级或者服务器端的js让Nodejs帮你执行。 nodeJS,是可以运行在后端的JavaScript。 为什么它能够在后端运行呢？ 这就得归功于V8引擎（V8是Google Chrome浏览器的JavaScript引擎），通过对高性能V8引擎的封装，并通过一系列优化的API类库，使其就能够在后端运行了。 JavaScript是单线程，所以要做到无阻塞，node是通过大量的回调函数来达到这一目的。 ###2.并且Nodejs有两大特点： 基于事件驱动； 无阻塞。###3.安装nodejs 首先到官网下载nodeJS 在下载完安装包后，在windows下按照默认程序走就ok啦 检验是否安装成功，在Windows环境下，打开命令提示符，输入node – v npm在你安装nodeJS时，就一带帮你安装了。打开命令提示符，输入npm – v 在命令提示符下，敲打我们的程序，你只需输入node，然后回车就可以进入node在命令提示符下的交互环境了。 进入node交互环境后，敲到”hello world”字符串后回车。 想退出node的这个交互环境，就Ctrl + C，连按两次就退出回到windows命令符啦。 4.接下来我们就用nodeJS来开发一个最简单的服务器程序。 ###接下来赶快去探索你的Nodejs吧，少年！","categories":[],"tags":[]},{"title":"niushiyi","slug":"hello-world","date":"2017-12-25T07:35:47.666Z","updated":"2017-12-28T06:25:50.433Z","comments":true,"path":"2017/12/25/hello-world/","link":"","permalink":"http://yoursite.com/2017/12/25/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}